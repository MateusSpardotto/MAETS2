// <auto-generated />
using System;
using DAO;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAO.Migrations
{
    [DbContext(typeof(MContext))]
    [Migration("20200320192934_initialDatabase")]
    partial class initialDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DTO.DesenvolvedorDTO", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int>("PaisOrigem")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Desenvolvedoras");
                });

            modelBuilder.Entity("DTO.GeneroDTO", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("ID");

                    b.ToTable("Generos");
                });

            modelBuilder.Entity("DTO.JogoDTO", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Calssificacao")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataLancamento")
                        .HasColumnType("datetime2");

                    b.Property<int>("DesenvolvedorDTOID")
                        .HasColumnType("int");

                    b.Property<string>("Especificacoes")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int>("GeneroDTOID")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<double>("Preco")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("DesenvolvedorDTOID");

                    b.HasIndex("GeneroDTOID");

                    b.ToTable("Jogos");
                });

            modelBuilder.Entity("DTO.UsuarioDTO", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CPF")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int>("Pais")
                        .HasColumnType("int");

                    b.Property<string>("Senha")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int>("TipoUsuario")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("DTO.UsuarioDTO_JogoDTO", b =>
                {
                    b.Property<int>("UsuarioDTOID")
                        .HasColumnType("int");

                    b.Property<int>("JogoDTOID")
                        .HasColumnType("int");

                    b.HasKey("UsuarioDTOID", "JogoDTOID");

                    b.HasIndex("JogoDTOID");

                    b.ToTable("UsuarioDTO_JogoDTO");
                });

            modelBuilder.Entity("DTO.JogoDTO", b =>
                {
                    b.HasOne("DTO.DesenvolvedorDTO", "DesenvolvedorDTO")
                        .WithMany("Jogos")
                        .HasForeignKey("DesenvolvedorDTOID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DTO.GeneroDTO", "GeneroDTO")
                        .WithMany("Jogos")
                        .HasForeignKey("GeneroDTOID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DTO.UsuarioDTO_JogoDTO", b =>
                {
                    b.HasOne("DTO.JogoDTO", "JogoDTO")
                        .WithMany("Usuarios")
                        .HasForeignKey("JogoDTOID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DTO.UsuarioDTO", "UsuarioDTO")
                        .WithMany("Jogos")
                        .HasForeignKey("UsuarioDTOID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
